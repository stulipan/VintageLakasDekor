
ul[data-v-c01ea2b8] {
    margin-bottom: 0;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"sources":["webpack:///./assets/vue/admin/smart-label/EditForm.vue"],"names":[],"mappings":";AAo7BA;IACA;AACA","file":"SmartLabelEdit.css","sourcesContent":["<template>\n    <div>\n        <div v-if=\"product.hasVariants\" class=\"modal fade\" id=\"modal--editOptions\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"modalLabel\" aria-hidden=\"true\">\n            <div class=\"modal-dialog modal-dialog-scrollable modal-dialog-centered\" role=\"document\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h4 class=\"modal-title\" id=\"modalLabel\">Edit options</h4>\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <template v-for=\"(option, index) in productOptions\">\n                            <div class=\"form-group form-row\">\n                                <div class=\"col-md-12 mb-2\">\n                                    <div class=\"admin-card-title\">Option {{index + 1}}</div>\n                                    <div v-if=\"!option.values.length\" class=\"admin-card-topright\">\n                                        <a @click.prevent=\"removeProductOption(index)\" role=\"button\" href=\"\" class=\"\">Remove</a>\n                                    </div>\n                                </div>\n                                <div class=\"col-md-4\">\n                                    <input v-model=\"productOptions[index].name\" type=\"text\" :id=\"`option_modal_${index}`\" required=\"required\" placeholder=\"Eg.: Size\" class=\"form-control\" ref=\"option\">\n                                </div>\n                                <div class=\"col-md-8\">\n                                    <multiselect\n                                            v-model=\"productOptions[index].values\"\n                                            :options=\"productOptions[index].values\"\n                                            :selected=\"productOptions[index].values\"\n                                            label=\"value\"\n                                            :taggable=\"true\"\n                                            :multiple=\"true\"\n                                            :hideSelected=\"true\"\n                                            track-by=\"value\"\n                                            @tag=\"addTag\"\n                                            @remove=\"removeTag\"\n                                            :id=\"index\"\n                                            :placeholder=\"!productOptions[index].values.length ? 'Type the value then press Enter' : null \"\n                                            :max-height=\"0\"\n                                            :closeOnSelect=\"false\"\n                                            class=\"taggable\"\n                                    >\n                                    </multiselect>\n                                    <!--                                                            <input v-model=\"option1Value\" type=\"text\" id=\"option1Value\" required=\"required\" placeholder=\"Separate options with a coma\" class=\"form-control\">-->\n                                </div>\n                            </div>\n                        </template>\n                        <template v-if=\"productOptions.length < 3\">\n                            <div class=\"form-group form-row\">\n                                <div class=\"col-md-12\">\n                                    <button @click.prevent=\"addProductOption\" class=\"btn btn-secondary\" role=\"button\">Add another option</button>\n                                </div>\n                            </div>\n                        </template>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <div class=\"loadingWrapper loadingWrapper-secondary\">\n                            <a href=\"\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Cancel</a>\n                            <div class=\"JS--loadingOverlay d-flex align-items-stretch\"></div>\n                        </div>\n                        <div class=\"loadingWrapper\">\n                            <button type=\"submit\" class=\"JS--btn-submitStatus btn btn-info\">Done</button>\n                            <div class=\"JS--loadingOverlay d-flex align-items-stretch\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <form novalidate=\"true\" ref=\"form\" enctype=\"multipart/form-data\">\n            <div v-if=\"localErrors.length\" class=\"alert alert-danger mb-2\">\n                <b>Please correct the following error(s):</b>\n                <ul>\n                    <li v-for=\"error in localErrors\">{{ error }}</li>\n                </ul>\n            </div>\n            <div v-else-if=\"errors.length\" class=\"alert alert-danger mb-2\">\n                <b>Please correct the following error(s):</b>\n                <ul>\n                    <li v-for=\"error in errors\">{{ error }}</li>\n                </ul>\n            </div>\n\n            <fieldset :disabled=\"formIsPosting\" :class=\"{ disabled: formIsPosting }\">\n                <div class=\"row row-5\">\n                    <div class=\"col-md-8 px-0 px-md-10px\">\n\n                        <div class=\"card mb-20px\">\n                            <div class=\"card-wrapper\">\n                                <div class=\"card-body\">\n                                    <div id=\"---NAME ---DESCRIPTION\">\n                                        <div class=\"form-group\">\n                                            <label class=\"col-form-labelX required\" for=\"productName\">Termék neve</label>\n                                            <input v-model=\"product.name\" type=\"text\" id=\"productName\" required=\"required\" maxlength=\"100\" class=\"form-control\">\n                                        </div>\n                                        <div class=\"form-group\">\n                                            <label class=\"col-form-labelX\" for=\"description\">Rövid ismertető</label>\n                                            <!--                                            <textarea v-model=\"product.description\" id=\"description\" maxlength=\"65535\" rows=\"5\" class=\"form-control\"></textarea>-->\n                                            <trumbowyg v-model=\"product.description\" :config=\"config\" class=\"form-control\" name=\"content\"></trumbowyg>\n                                            <!--                                    <ckeditor :editor=\"editor\" v-model=\"editorData\" :config=\"editorConfig\"></ckeditor>-->\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"card mb-20px\">\n                            <div class=\"card-wrapper\">\n                                <div class=\"card-body\">\n                                    <div class=\"h5 admin-card-title mb-4\">Termékvariációk</div>\n                                    <div v-if=\"product.hasVariants\" class=\"admin-card-topright\">\n                                        <div class=\"dropdown\">\n                                            <a class=\"dropdown-toggle\" href=\"javascript: void(0);\" id=\"moreOptions\" role=\"button\" data-toggle=\"dropdown\" data-display=\"static\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                                <!--                                        <i class=\"fas fa-ellipsis-h\"></i> -->\n                                                More options\n                                            </a>\n                                            <div class=\"dropdown-menu dropdown-transition mt-2\" aria-labelledby=\"moreOptions\">\n                                                <a class=\"dropdown-item\" href=\"#\" data-toggle=\"modal\" data-target=\"#modal--editOptions\" data-backdrop=\"static\">\n                                                    Edit options\n                                                </a>\n\n                                                <a class=\"dropdown-item\" href=\"\" data-toggle=\"modal\" data-target=\"#modal--reorderOptions\" data-backdrop=\"static\">\n                                                    Reorder options\n                                                </a>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div id=\"---KIND ---TERMEK_OPTION\">\n                                        <!--  If hasVariants checkbox is checked and the Product has variants  -->\n                                        <!--  Lists the variants  -->\n                                        <template v-if=\"product.hasVariants\">\n                                            <template>\n                                                <div class=\"form-group row\">\n                                                    <div class=\"col-sm-12\">\n                                                        <span class=\"mr-3\">Select:</span>\n                                                        <template v-for=\"(option, i) in variantOptions\">\n                                                            <template v-for=\"(optionValue, i) in option.values\">\n                                                                <a href=\"javascript: void(0);\" class=\"mr-3\">{{ optionValue.value }}</a>\n                                                            </template>\n                                                        </template>\n                                                    </div>\n                                                </div>\n                                                <div class=\"form-group row\">\n                                                    <div class=\"col-sm-12 grid-preview grid-shadowX\">\n                                                        <div class=\"no-margins\">\n                                                            <div class=\"grid-scroll\">\n                                                                <div class=\"position-relative\">\n                                                                    <div class=\"grid-template-container py-3 px-4 font-weight-bold\">\n                                                                        <template v-for=\"(option, i) in variantOptions\">\n                                                                            <div class=\"grid-cell\">{{ option.name }}</div>\n                                                                        </template>\n                                                                        <div class=\"grid-cell\">Price</div>\n                                                                        <div class=\"grid-cell\">Quantity</div>\n                                                                        <div class=\"grid-cell\">SKU</div>\n                                                                        <div class=\"grid-cell\">Barcode</div>\n                                                                    </div>\n                                                                    <div class=\"grid-shadowXXXX\">\n                                                                        <ul class=\"\">\n                                                                            <template v-for=\"(variant, i) in variants\">\n                                                                                <li class=\"\">\n                                                                                    <div class=\"variant-item\">\n                                                                                        <div class=\"grid-template-container py-3 px-4\">\n                                                                                            <template v-for=\"(selected, j) in variant.selectedOptions\">\n                                                                                                <div class=\"grid-cell mr-2\">\n<!--                                                                                                    <input v-model=\"selected.optionValue.value\" type=\"text\" required=\"required\" placeholder=\"\" class=\"form-control\">-->\n                                                                                                    <input v-model=\"selected.optionValue.value\" :id=\"`${variant.name}_${i}_${selected.option}_${j}`\" type=\"text\" :disabled=\"true\" required=\"required\" placeholder=\"\" class=\"form-control\">\n                                                                                                </div>\n                                                                                            </template>\n\n                                                                                            <div class=\"grid-cell mr-2\">\n                                                                                                <div class=\"input--area-group\">\n                                                                                                    <div class=\"input--area-addon input--area-prepend\">\n                                                                                                        HUF\n                                                                                                    </div>\n                                                                                                    <input v-model=\"variant.price.numericValue\" type=\"number\" required=\"required\" placeholder=\"0.00\" class=\"form-control\">\n                                                                                                </div>\n                                                                                            </div>\n                                                                                            <div class=\"grid-cell mr-2\">\n                                                                                                <input v-model=\"variant.position\" :id=\"`${variant.name}_quantity_${i}`\" type=\"number\" required=\"required\" class=\"form-control\">\n                                                                                            </div>\n                                                                                            <div class=\"grid-cell mr-2\">\n                                                                                                <input v-model=\"variant.sku\" :id=\"`${variant.name}_sku_${i}`\" type=\"text\" required=\"required\" class=\"form-control\">\n                                                                                            </div>\n                                                                                        </div>\n                                                                                    </div>\n                                                                                </li>\n                                                                            </template>\n                                                                        </ul>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </template>\n                                        </template>\n\n                                        <template v-else>\n                                            <div class=\"form-group row\">\n                                                <div class=\"col-sm-12\">\n                                                    <div class=\"custom-control custom-checkbox\">\n                                                        <input type=\"checkbox\" v-model=\"isVariantsCheckboxOn\" @change=\"addFirstOption\" id=\"hasVariants\" name=\"hasVariants\" required=\"required\" class=\"custom-control-input\">\n                                                        <label class=\"custom-control-label required\" for=\"hasVariants\">This product has multiple options, like different sizes or colors</label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row\">\n                                                <div class=\"col-sm-12\">\n                                                    <!--  If hasVariants checkbox is checked BUT the Product has NO variants  -->\n                                                    <!--  Displays the product option form and the variants preview form -->\n                                                    <template v-if=\"isVariantsCheckboxOn\">\n                                                        <template v-for=\"(option, index) in productOptions\">\n                                                            <div class=\"form-group form-row\">\n                                                                <div class=\"col-md-12 mb-2\">\n                                                                    <div class=\"admin-card-title\">Option {{index + 1}}</div>\n                                                                    <div v-if=\"!option.values.length\" class=\"admin-card-topright\">\n                                                                        <a @click.prevent=\"removeProductOption(index)\" role=\"button\" href=\"\" class=\"\">Remove</a>\n                                                                    </div>\n                                                                </div>\n                                                                <div class=\"col-md-4\">\n                                                                    <input v-model=\"productOptions[index].name\" type=\"text\" :id=\"`option_${index}`\" required=\"required\" placeholder=\"Eg.: Size\" class=\"form-control\" ref=\"option\">\n                                                                </div>\n                                                                <div class=\"col-md-8\">\n                                                                    <multiselect\n                                                                            v-model=\"productOptions[index].values\"\n                                                                            :options=\"productOptions[index].values\"\n                                                                            :selected=\"productOptions[index].values\"\n                                                                            label=\"value\"\n                                                                            :taggable=\"true\"\n                                                                            :multiple=\"true\"\n                                                                            :hideSelected=\"true\"\n                                                                            track-by=\"value\"\n                                                                            @tag=\"addTag\"\n                                                                            @remove=\"removeTag\"\n                                                                            :id=\"index\"\n                                                                            :placeholder=\"!productOptions[index].values.length ? 'Type the value then press Enter' : null \"\n                                                                            :max-height=\"0\"\n                                                                            :closeOnSelect=\"false\"\n                                                                            class=\"taggable\"\n                                                                    >\n                                                                    </multiselect>\n                                                                </div>\n                                                            </div>\n                                                        </template>\n                                                        <template v-if=\"productOptions.length < 3\">\n                                                            <div class=\"form-group form-row\">\n                                                                <div class=\"col-md-12\">\n                                                                    <a @click=\"addProductOption\" class=\"btn btn-secondary\" role=\"button\" tabindex=\"0\">Add another option</a>\n                                                                    <!--                                                            <div class=\"admin-card-topright\">-->\n                                                                    <!--                                                                <button @click.prevent=\"createVariants\" class=\"btn btn-info\" :disabled=\"!hasProductOptions\">Create variants</button>-->\n                                                                    <!--                                                            </div>-->\n                                                                </div>\n                                                            </div>\n                                                        </template>\n                                                        <template>\n                                                            <div class=\"form-group row\">\n                                                                <div class=\"col-sm-12 grid-preview grid-shadowX\">\n                                                                    <div class=\"no-margins\">\n                                                                        <div class=\"grid-scroll\">\n                                                                            <div class=\"position-relative\">\n                                                                                <div class=\"grid-template-container py-3 px-4 font-weight-bold\">\n                                                                                    <template v-for=\"(option, i) in productOptions\">\n                                                                                        <div v-if=\"option.values.length\" class=\"grid-cell\">{{ option.name }}</div>\n                                                                                    </template>\n                                                                                    <div class=\"grid-cell\">Price</div>\n                                                                                    <div class=\"grid-cell\">Quantity</div>\n                                                                                    <div class=\"grid-cell\">SKU</div>\n                                                                                    <div class=\"grid-cell\">Barcode</div>\n                                                                                </div>\n                                                                                <div class=\"grid-shadowXXXX\">\n                                                                                    <ul class=\"\">\n                                                                                        <template v-for=\"(variant, i) in variants\">\n                                                                                            <li class=\"\">\n                                                                                                <div class=\"variant-item\">\n                                                                                                    <div class=\"grid-template-container py-3 px-4\">\n                                                                                                        <template v-for=\"(selected, j) in variant.selectedOptions\">\n                                                                                                            <div class=\"grid-cell mr-2\">\n                                                                                                                <input v-model=\"selected.optionValue.value\" :id=\"`${variant.name}_${i}_${selected.option}_${j}`\" type=\"text\" :disabled=\"true\" required=\"required\" placeholder=\"\" class=\"form-control\">\n                                                                                                            </div>\n                                                                                                        </template>\n\n                                                                                                        <div class=\"grid-cell mr-2\">\n                                                                                                            <div class=\"input--area-group\">\n                                                                                                                <div class=\"input--area-addon input--area-prepend\">\n                                                                                                                    HUF\n                                                                                                                </div>\n                                                                                                                <input v-model=\"variant.price.numericValue\" :id=\"`${variant.name}_price_${i}`\" type=\"number\" required=\"required\" placeholder=\"0.00\" class=\"form-control\">\n                                                                                                            </div>\n                                                                                                        </div>\n                                                                                                        <div class=\"grid-cell mr-2\">\n                                                                                                            <input v-model=\"variant.position\" :id=\"`${variant.name}_quantity_${i}`\" type=\"number\" required=\"required\" class=\"form-control\">\n                                                                                                        </div>\n                                                                                                        <div class=\"grid-cell mr-2\">\n                                                                                                            <input v-model=\"variant.sku\" :id=\"`${variant.name}_sku_${i}`\" type=\"text\" required=\"required\" class=\"form-control\">\n                                                                                                        </div>\n                                                                                                    </div>\n                                                                                                </div>\n                                                                                            </li>\n                                                                                        </template>\n                                                                                    </ul>\n                                                                                </div>\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </template>\n                                                    </template>\n                                                    <template v-else>\n                                                        <div class=\"form-group row\" id=\"---termekAr\">\n                                                            <div class=\"col-sm-12\">\n                                                                <label class=\"required\" for=\"price_grossPrice\">Termék ár</label>\n                                                                <div class=\"input--area-group\">\n                                                                    <div class=\"input--area-addon input--area-prepend\">\n                                                                        HUF\n                                                                    </div>\n                                                                    <input v-model=\"product.price.numericValue\" type=\"number\" id=\"price_grossPrice\" required=\"required\" placeholder=\"0.00\" class=\"form-control\">\n                                                                </div>\n                                                            </div>\n                                                            <div class=\"col-sm-12 text-muted mt-2\">\n                                                                Ez lesz a Standard méret ára, amennyiben 3 meretű termékről van szó.\n                                                            </div>\n                                                        </div>\n                                                    </template>\n                                                </div>\n                                            </div>\n                                        </template>\n\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"card mb-20px\">\n                            <div class=\"card-wrapper\">\n                                <div class=\"card-body\">\n                                    <div class=\"h5 admin-card-title mb-4\">Képek</div>\n                                    <div>\n                                        <div v-if=\"product.images\" class=\"\" id=\"---imagePreview\">\n\n                                            <div class=\"row\">\n                                                <div class=\"col-sm-12 mr-auto\">\n\n                                                    <div class=\"row row-narrow\">\n                                                        <div v-for=\"item in product.images\" class=\"col-md-4 col-6 col-narrow\">\n                                                            <div class=\"product\">\n                                                                <div class=\"product-image\">\n                                                                    <div :style=\"{ backgroundImage: 'url(' + item.imageUrl + ')' }\" style=\"background: center center no-repeat;background-size: cover; height: 200px;\" class=\"d-flexX w-100\">\n\n                                                                    </div>\n                                                                    <!--<img :src=\"item.imageUrl\" class=\"img-thumbnailX img-fluid\" style=\"max-height: 200px;\" />-->\n\n                                                                    <!--<a href=\"/termek/1\" class=\"tile-link product-hover-overlay-link\">-->\n                                                                    <!--</a>-->\n                                                                    <div v-if=\"item.ordering === '0' || item.ordering === 0\" class=\"card-img-overlay d-flex align-items-end p-0\">\n                                                                        <div class=\"text-center w-100 overlay--productCover\">\n                                                                            <i class=\"fas fa-camera\"></i> Borítókép\n                                                                        </div>\n                                                                    </div>\n\n                                                                </div>\n                                                                <div class=\"py-2 text-center\">\n                                                                    <p class=\"productList--name mb-1\">\n                                                                        <a @click.prevent=\"onRemoveImage(item)\" href=\"#\" class=\"btn btn-sm btn-secondary\" title=\"Töröl\">\n                                                                            <i class=\"far fa-trash-alt\"></i> Töröl\n                                                                        </a>\n                                                                    </p>\n                                                                </div>\n\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                        </div>\n\n                                        <div class=\"\" id=\"---KEP_FELTOLTES\">\n                                            <div class=\"row\">\n                                                <div class=\"col-sm-12 mr-auto\">\n                                                    <!--:on-max-files=\"maxFilesReached\"-->\n                                                    <vue-clip\n                                                            :options=\"options\"\n\n                                                            :on-complete=\"complete\"\n                                                            :on-added-file=\"addedFile\"\n                                                            class=\"uploader\"\n                                                            :key=\"componentKey\"\n                                                            ref=\"vueclip\"\n                                                            role=\"button\"\n                                                            tabindex=\"0\"\n                                                    >\n                                                        <template v-slot:clip-uploader-action=\"props\">\n                                                            <div class=\"uploader-action\" v-bind:class=\"{dragging: props.dragging}\">\n                                                                <div class=\"dz-message\">\n                                                                    <i class=\"fas fa-upload\"></i>\n                                                                    <span class=\"mb-0 btn-link\">Képfeltöltés... </span> <br>\n                                                                    <span>vagy húzd be ide a fájlokat a feltöltéshez.</span>\n                                                                </div>\n                                                            </div>\n                                                        </template>\n\n                                                        <template v-slot:clip-uploader-body=\"props\">\n                                                            <div class=\"uploader-files\" v-if=\"uploadedFiles.length\">\n                                                                <div v-for=\"file in uploadedFiles\" class=\"uploader-file d-flex justify-content-start align-items-center\">\n                                                                    <div class=\"file-avatar mr-3\">\n                                                                        <img v-bind:src=\"file.dataUrl\" class=\"img-thumbnail\" />\n                                                                    </div>\n                                                                    <div class=\"file-details\">\n                                                                        <div class=\"file-name\">\n                                                                            {{ file.name }} {{ file.customAttributes.id }}\n                                                                            <!--{{ file.status }}-->\n                                                                        </div>\n                                                                        <div class=\"file-progress\" v-if=\"file.status !== 'error' && file.status !== 'success'\">\n                                                                            <span class=\"progress-indicator\" v-bind:style=\"{width: file.progress + '%'}\"></span>\n                                                                        </div>\n                                                                        <div class=\"file-meta\" v-else>\n                                                                            <span class=\"file-size\">{{ file.size }} KB</span> |\n                                                                            <span class=\"file-status text-success\">{{ file.progress }}%</span>\n                                                                            <span class=\"file-status text-danger\" v-if=\"file.progress === 0 && file.errorMessage\">{{ file.errorMessage }}</span>\n                                                                        </div>\n                                                                        <!--<div class=\"file-meta\" v-if=\"error\">-->\n                                                                        <!--<span class=\"file-size\">{{ error }} !!</span>-->\n                                                                        <!--</div>-->\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </template>\n                                                    </vue-clip>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"card mb-20px\">\n                            <div class=\"card-wrapper\">\n                                <div class=\"card-body\">\n                                    <div class=\"h5 admin-card-title mb-4\">Készlet</div>\n                                    <div id=\"---SKU ---STOCK\">\n                                        <div class=\"form-group row\">\n                                            <div class=\"col-sm-12\">\n                                                <label class=\"required\" for=\"sku\">SKU (Stock Keeping Unit)</label>\n                                                <input v-model=\"product.sku\" type=\"text\" id=\"sku\" required=\"required\" placeholder=\"Pl: DF100172\" class=\"form-control\">\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row\">\n                                            <div class=\"col-sm-12\">\n                                                <label class=\"required\" for=\"stock\">Készlet a raktáron</label>\n                                                <input v-model=\"product.stock\" type=\"number\" id=\"stock\" required=\"required\" placeholder=\"\" class=\"form-control\">\n                                                <!--<div class=\"input-group-append\">-->\n                                                <!--<span class=\"input-group-text\">db</span>-->\n                                                <!--</div>-->\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div name=\"__SIDEBAR\" class=\"col-md-4 px-0 px-md-10px orderDetail--sidebarX\">\n                        <div class=\"card mb-20px\">\n                            <div class=\"card-wrapper\">\n                                <div class=\"card-body\">\n                                    <div class=\"h5 admin-card-title mb-4\">Kategorizálás</div>\n                                    <div id=\"---STATUS ---CATEGORIES ---BADGES\">\n                                        <div class=\"form-group row\">\n                                            <div class=\"col-sm-12 order-1\">\n                                                <legend class=\"col-form-label required\">Állapot</legend>\n                                            </div>\n                                            <div class=\"col-sm-12 order-3 order-md-2\">\n                                                <div class=\"form-row\">\n                                                    <template v-for=\"status in statuses\">\n                                                        <div class=\"col-12\">\n                                                            <div class=\"visual-picker visual-picker-with-checkbox align-top mr-2 mb-2\" :class=\"product.status.id == status.id ? 'visual-picker-checked' : ''\">\n                                                                <input type=\"radio\" v-model=\"product.status\" :value=\"status\" :id=\"`status_${status.id}`\" required=\"required\">\n                                                                <label class=\"visual-picker-figure required justify-content-start\" :for=\"`status_${status.id}`\">\n                                                                <span class=\"visual-picker-content\">\n                                                                    <span class=\"tile tile-lg\">\n                                                                        <span>\n                                                                            <span class=\"text-nowrap\"><span v-html=\"status.icon\"></span>{{ status.name }}</span>\n                                                                        </span>\n                                                                    </span>\n                                                                </span>\n                                                                </label>\n                                                            </div>\n                                                        </div>\n                                                    </template>\n                                                    <div class=\"col-sm-12 text-muted\">\n                                                        <em>Kifutott</em> állapotban a termék továbbra is látszik a weboldalon, csupán nem lesz neki <em>Kosárba rakom</em> gomb.\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                        <div class=\"form-group row\">\n                                            <div class=\"col-sm-12\">\n                                                <label class=\"required\" for=\"category\">Kategóriák</label>\n                                                <multiselect-bellow\n                                                        v-model=\"product.categories\"\n                                                        :options=\"categories\"\n                                                        :multiple=\"true\"\n                                                        :close-on-select=\"false\"\n                                                        :custom-label=\"showCategoryName\"\n                                                        placeholder=\"Válassz...\"\n                                                        track-by=\"id\"\n                                                        :showLabels=\"false\"\n                                                        myClass=\"detached\"\n                                                        open-direction=\"auto\"\n                                                        no-result-label=\"Upsz! Nincs ilyen kategória...\"\n                                                >\n                                                </multiselect-bellow>\n                                            </div>\n                                        </div>\n\n                                        <div class=\"form-group row\">\n                                            <div class=\"col-sm-12\">\n                                                <label class=\"required\" for=\"badge\">Matricák</label>\n                                                <multiselect-bellow\n                                                        v-model=\"product.badges\"\n                                                        :options=\"badges\"\n                                                        :multiple=\"true\"\n                                                        :close-on-select=\"false\"\n                                                        :custom-label=\"showBadgeName\"\n                                                        placeholder=\"Válassz...\"\n                                                        track-by=\"id\"\n                                                        :showLabels=\"false\"\n                                                        myClass=\"detached\"\n                                                        open-direction=\"auto\"\n                                                        no-result-label=\"Upsz! Nincs ilyen kategória...\"\n                                                >\n                                                </multiselect-bellow>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <save-toolbar\n                        :entityToWatch=\"product\"\n                        :formIsPosting=\"formIsPosting\"\n                        v-on:submit=\"onSubmit\"\n                        v-on:click=\"onCancel\"\n                        class=\"mb-4\"\n                ></save-toolbar>\n            </fieldset>\n        </form>\n    </div>\n</template>\n\n<script>\n    import Multiselect from 'vue-multiselect'\n    import SaveToolbar from './../_components/save-toolbar/SaveToolbar.vue'\n    import MultiselectBellow from \"./../_components/MultiselectBellow\"\n\n    const initialData = () => {\n        return {\n            options: {\n                url: '/hu/admin/api/images/product/',\n                headers: {\n//                        credentials: 'same-origin',\n//                        type: 'multipart/form-data',  // ??\n                },\n                paramName: 'imageFile',\n//                uploadMultiple: false,\n//                parallelUploads: 3,\n                maxFiles: {\n                    limit: 5,\n                    message: 'You can only upload a max of 5 files'\n                },\n                acceptedFiles: {\n                    extensions: ['image/*'],\n                    message: 'You are uploading an invalid file'\n                },\n            },\n        }\n    };\n    \n    export default {\n        components: {\n            Multiselect,\n            SaveToolbar,\n            MultiselectBellow,\n        },\n        props: [\n            'formIsPosting',\n            'product',\n            'categories',\n            'statuses',\n            'badges',\n            'errors',\n            'resetForm',\n        ],\n        data: function () {\n            return {\n                // editor: ClassicEditor,\n                // editorData: '<p>Content of the editor.</p>',\n                // editorConfig: {\n                //     height: 300,\n                // },\n                // content: null,\n                config: {\n                    btns: [\n                        // ['undo', 'redo'], // Only supported in Blink browsers\n                        ['formatting'],\n                        ['strong', 'em', 'underline'],\n                        ['unorderedList', 'orderedList'],\n                        ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull'],\n                        ['link'],\n                        ['insertImage'],\n                        ['removeformat'],\n                        ['viewHTML'],\n                    ],\n                    autogrow: true,\n                    changeActiveDropdownIcon: true,\n                    tagsToRemove: ['script', 'link'],\n                    imageWidthModalEdit: true,\n                    removeformatPasted: true,\n                },\n\n                localErrors: [],\n\n                imageIsUploading: false,\n                imageIsSaved: false,\n                imageUrl: null,\n                options: initialData().options,\n                uploadedFiles: [],\n\n                componentKey: 0,  // can be somethingElse, whatever\n                isVariantsCheckboxOn: this.product.hasVariants,\n                productOptions: [],\n                // productOptions: this.product.options,\n                variants: [],\n                // variants: this.product.variants,\n                variantOptions: [],\n            }\n        },\n        computed: {\n            hasProductOptions: function() {\n                if (this.productOptions.length) {\n                    for (let o of this.productOptions) {\n                        return o.values.length ? true : false;\n                    }\n                }\n                return false;\n            },\n            productOptionsLength: function() {\n                let l = 0;\n                for (let o of this.productOptions) {\n                    l += o.values.length ? 1 : 0;\n                    // l += 1;\n                }\n                return l;\n            },\n        },\n        watch: {\n            product: 'updateForm',\n            imageUrl: {\n                deep: true,\n                handler() {\n                    this.imageIsSaved = false\n                },\n            },\n            resetForm: 'resetUploader',\n            productOptions: {\n                immediate: true,\n                deep: true,\n                handler() {\n                    this.extractOptionListFromVariants();\n                }\n            },\n        },\n        methods: {\n            extractOptionListFromVariants() {\n                this.variantOptions.length = 0;\n                if (this.variants.length) {\n                    let v = this.variants[0];\n                    for (let s of v.selectedOptions) {\n                        this.variantOptions.push(this.productOptions.find(el => el.name === s.option.name));\n                    }\n                } else {\n                    for (let o of this.productOptions) {\n                        this.variantOptions.push(o);\n                    }\n                }\n            },\n            addTag(value, index) {\n                const optionValue = {\n                    id: null,\n                    value: value,\n                    position: this.productOptions[index].values.length + 1,\n                };\n                this.productOptions[index].values.push(optionValue);\n                this.addVariant({\n                    option: this.productOptions[index],\n                    optionValue: optionValue,\n                });\n            },\n            removeTag(value, index) {\n                let selectedOption = {\n                    option: this.productOptions[index],\n                    optionValue: value,\n                };\n                this.$nextTick(function () {\n                    this.removeVariant(selectedOption);\n                });\n            },\n            isOptionInSelectedOptions(selectedOptions, selectedOption) {\n                for (let i=0; i<selectedOptions.length; ++i) {\n                    if (selectedOptions[i].option.name === selectedOption.option.name) {\n                        return true;\n                    }\n                }\n                return false;\n            },\n            isOptionValueInSelectedOptions(selectedOptions, selectedOption) {\n                for (let i=0; i<selectedOptions.length; ++i) {\n                    if (selectedOptions[i].optionValue.value === selectedOption.optionValue.value) {\n                        return true;\n                    }\n                }\n                return false;\n            },\n            generateVariantName(selectedOptions) {\n                let name = '';\n                for (let s of selectedOptions) { name += name ? ' / ' + s.optionValue.value : s.optionValue.value; }\n                return name;\n            },\n            addVariant (selectedOption) {\n                let variants = [];\n                if (this.variants.length === 0) {\n                    variants.push({\n                        name: selectedOption.optionValue.value,\n                        selectedOptions: [selectedOption],\n                        position: variants.length + 1,\n                        price: this.product.price ? { numericValue: this.product.price.numericValue } : { numericValue: 0 },\n                    });\n                }\n\n                if (this.variants.length) {\n                    // let tempVariants = [];\n                    // Ha mar leteznek variansok\n                    for (let v of this.variants) {\n                        // Ha nincs benne az option (pl: Color), akkor kiboviti az uj option-nel es optionValue-val\n                        if (!this.isOptionInSelectedOptions(v.selectedOptions, selectedOption)) {\n                            // v.selectedOptions.push(Object.create(selectedOption));\n                            v.selectedOptions.push(selectedOption);\n                            v.name = this.generateVariantName(v.selectedOptions);\n                            v.position = !v.position ? this.variants.length+1 : v.position;\n                        }\n                        // Ha mar benne van az option (pl: Color) akkor az uj optionValue-val krealja az uj variantokat\n                        else {\n                            if (!this.isOptionValueInSelectedOptions(v.selectedOptions, selectedOption)) {\n                                let newVariant = {};\n                                newVariant.selectedOptions = [];\n                                newVariant.selectedOptions.push.apply(newVariant.selectedOptions, v.selectedOptions);\n                                // mivel az uj variant a regi selectedOptions tartalmat kapja meg, igy abbol torolni kell az option jelenlegi erteket\n                                const index = newVariant.selectedOptions.findIndex((el) => el.option.name === selectedOption.option.name && el.optionValue.value !== selectedOption.optionValue.value);\n                                newVariant.selectedOptions.splice(index, 1, selectedOption);\n                                newVariant.name = this.generateVariantName(newVariant.selectedOptions);\n                                newVariant.position = null;\n                                newVariant.price = {\n                                    numericValue: v.price.numericValue,\n                                };\n                                // Ha meg nincs position akkor, length azaz 0+1, amugy nem modositja\n                                // newVariant.position = !newVariant.position ? this.variants.length+1 : newVariant.position;\n                                // tempVariants.push(newVariant);\n\n                                if (!this.hasVariant(newVariant)) {\n                                    this.variants.push(newVariant);\n                                }\n                            }\n                        }\n                    }\n                    // this.variants.push.apply(this.variants, tempVariants);\n                    // tempVariants.length = 0;\n                }\n                if (this.variants.length === 0) {\n                    this.variants.push.apply(this.variants, variants);\n                }\n            },\n            removeVariant(selectedOption) {\n                for (let v of this.variants) {\n                    if (this.isOptionInSelectedOptions(v.selectedOptions, selectedOption)) {\n                        if (this.isOptionValueInSelectedOptions(v.selectedOptions, selectedOption)) {\n                            const index = v.selectedOptions.findIndex((el) => el.optionValue.value === selectedOption.optionValue.value);\n                            v.selectedOptions.splice(index, 1);\n                            v.name = this.generateVariantName(v.selectedOptions);\n                        }\n                    }\n                }\n                while(this.variants.findIndex((el) => el.selectedOptions.length < this.productOptionsLength) !== -1) {\n                    this.variants.splice(this.variants.findIndex((el) => el.selectedOptions.length < this.productOptionsLength), 1)\n                }\n            },\n            hasVariant (variant) {\n                for (let v of this.variants) {\n                    if (v.selectedOptions.length === variant.selectedOptions.length) {\n                        let hasVariant = [];\n                        for (let i=0; i<v.selectedOptions.length; ++i) {\n                            if (v.selectedOptions[i].optionValue.value === variant.selectedOptions[i].optionValue.value ) {\n                                hasVariant[i] = true;\n                            } else {\n                                hasVariant[i] = false;\n                            }\n                        }\n                        if (hasVariant.every((el) => el === true )) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            },\n            showCategoryName(catObj) {\n                return `${catObj.name}`\n            },\n            showBadgeName(obj) {\n                return `${obj.name}`\n            },\n            submitFile() {\n                this.imageIsUploading = true;\n                setTimeout(() => this.savedImage(), 1000);\n            },\n            savedImage() {\n                this.imageIsUploading = false;\n                this.imageIsSaved = true;\n            },\n            onSubmit(e) {\n                // Array.prototype.push.apply(this.product.variants, this.variants);\n                this.product.variants.splice(0, this.product.variants.length, ...this.variants);\n                this.removeEmptyOptions();\n                this.product.options.splice(0, this.product.options.length, ...this.productOptions);\n//                if (this.validatedForm(e)) {\n                this.$emit('submit', this.product);\n//                }\n            },\n            onCancel() {\n                this.$emit('click')\n            },\n            onRemoveImage(image) {\n                const index = this.product.images.findIndex((img) => img.id === image.id);\n                // if exists the image\n                if (index !== -1) {\n                    this.product.images.splice(index, 1);\n                    for (let i in this.product.images) {\n                        this.product.images[i].ordering = i;\n                    }\n                }\n            },\n            validatedForm(e) {\n                this.localErrors = [];\n                if (!this.product.name) {\n                    this.localErrors.push('Add meg a kategória nevét.');\n                }\n                if (!this.product.slug) {\n                    this.localErrors.push('Add meg a slug-ot.');\n                }\n                if (!this.localErrors.length) {   // equals to: if length == 0\n                    return true;\n                }\n                e.preventDefault();\n            },\n            updateForm() {\n                this.localErrors = [];\n                this.resetUploader();\n//                this.imageUrl = this.product.imageUrl;\n                let el = this.$refs.form;\n                el.scrollIntoView();\n            },\n            resetUploader() {\n                this.$refs.vueclip.removeAllFiles();\n                this.uploadedFiles = [];\n                this.componentKey += 1;\n            },\n            complete(file, status, xhr) {\n                console.log(file);\n                // Adding server id to be used for deleting the file.\n                if (status === 'success') {\n                    let data = JSON.parse(xhr.response);\n                    let image = {};\n                    image.image = data.images[0];\n                    image.imageUrl = data.images[0].file;\n                    image.ordering = this.product.images.length;  // the length before push() is actually the index of the last element after push()\n                    this.product.images.push(image);\n                    file.addAttribute('id', image.image.id);\n\n//                    let image = data.images[0];\n//                    this.product.images.push(image);\n//                    file.addAttribute('id', image.id);\n//                    for (let item of Object.values(data.images)) {\n//                        file.addAttribute('id', item.id);\n//                        this.product.images.push(item);\n//                    }\n                    console.log(file.customAttributes.id);   ////////////\n                } else {\n                    let json = JSON.parse(xhr.response);\n                    this.errors.push(json.errors.imageFile);\n                    console.log(json.errors.imageFile)\n                }\n            },\n            addedFile(file) {\n                this.uploadedFiles.push(file);\n            },\n            addFirstOption () {\n                if (!this.product.hasVariants && !this.productOptions.length) {\n                    this.addProductOption();\n                }\n            },\n            addProductOption () {\n                if (this.productOptions.length < 3) {\n                    let productOption = {\n                        name: '',\n                        position: null,\n                        values: [],\n                    };\n                    productOption.position = this.productOptions.length + 1;\n\n                    // Es csak most bovitem a productOptions listat, az uj ures option-nal\n                    this.productOptions.push(productOption);\n                    this.$nextTick(() => {this.$refs.option[this.productOptions.length-1].focus();});\n                }\n            },\n            removeProductOption (index) {\n                this.productOptions.splice(index, 1);\n            },\n            removeEmptyOptions() {\n                while(this.productOptions.findIndex((el) => el.values.length === 0) !== -1) {\n                    this.productOptions.splice(this.productOptions.findIndex((el) => el.values.length === 0), 1)\n                }\n            },\n            focusProductOption (index) {\n                this.$refs.option[index].focus();\n            }\n        },\n        created () {\n            Array.prototype.push.apply(this.variants, this.product.variants);\n            Array.prototype.push.apply(this.productOptions, this.product.options);\n            this.extractOptionListFromVariants();\n        },\n//        // This is necessary, because of a bug in Dropzone, which ignores options: { uploadMultiple: false, }\n       mounted() {\n//            this.$refs.vueclip.uploader._uploader.hiddenFileInput.removeAttribute(\"multiple\")\n       }\n    }\n</script>\n\n<style scoped=\"\">\n    ul {\n        margin-bottom: 0;\n    }\n</style>"],"sourceRoot":""}*/