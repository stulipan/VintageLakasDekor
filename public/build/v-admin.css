
ul[data-v-48ac1038] {
    margin-bottom: 0;
}



select option[data-v-12b20856] {
    padding: .45rem 0.125rem !important;
    border-bottom: 1px solid #ccd4da;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"sources":["webpack:///./assets/vue/admin/category/EditForm.vue","webpack:///./assets/vue/admin/geoprice/GeoPriceManager.vue"],"names":[],"mappings":";AA8SA;IACA;AACA;;;;AClDA;IACA;IACA;AACA","file":"v-admin.css","sourcesContent":["<template>\n    <form novalidate=\"true\" ref=\"form\" enctype=\"multipart/form-data\">\n        <div v-if=\"localErrors.length\" class=\"alert alert-danger mb-2\">\n            <b>Please correct the following error(s):</b>\n            <ul>\n                <li v-for=\"error in localErrors\">{{ error }}</li>\n            </ul>\n        </div>\n        <div v-else-if=\"errors.length\" class=\"alert alert-danger mb-2\">\n            <b>Please correct the following error(s):</b>\n            <ul>\n                <li v-for=\"error in errors\">{{ error }}</li>\n            </ul>\n        </div>\n        <div class=\"mb-2\">\n            <div class=\"form-group row\">\n                <div class=\"col-sm-12 col-md-2\">\n                    <label class=\"col-form-label required\" for=\"categoryName\">Kategória</label>\n                </div>\n                <div class=\"col-sm-12 col-md-8 col-xl-7 mr-auto\">\n                    <input type=\"text\" v-model=\"category.name\" id=\"categoryName\" required=\"required\" maxlength=\"100\" class=\"form-control\">\n                </div>\n\n            </div>\n        </div>\n        <div v-if=\"category.imageUrl\" class=\"mb-2\">\n            <div class=\"form-group row\">\n                <div class=\"col-sm-12 col-md-2\">\n                </div>\n                <div class=\"col-sm-12 col-md-5 col-xl-4 mr-auto\">\n                    <div class=\"w-100\">\n                        <img :src=\"category.imageUrl\" class=\"img-thumbnail\" style=\"max-height: 60px; width: 320px;\" />\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"mb-2\">\n            <div class=\"form-group row\">\n                <div class=\"col-sm-12 col-md-2\">\n                    <label class=\"col-form-label required\" for=\"categoryParentCategory\">Szülőkategória</label>\n                </div>\n                <div class=\"col-sm-12 col-md-5 col-xl-4 mr-auto\">\n                    <!--Egy select-ben a v-model erteke es az option :value meg kell egyezzen,\n                    hogy ki legyen valasztva az opcio a legorduloben-->\n                    <select v-model=\"category.parentCategory\" id=\"categoryParentCategory\" required=\"required\" class=\"custom-select form-control\">\n                        <option value=\"\"> - nincs - </option>\n                        <template v-for=\"cat in parentCategories\" track-by=\"cat.id\">\n                            <option :value=\"cat\">{{cat.name}}</option>\n                        </template>\n                    </select>\n                </div>\n            </div>\n        </div>\n        <div class=\"mb-2\">\n            <div class=\"form-group row\">\n                <div class=\"col-sm-12 col-md-2\">\n                    <label class=\"form-control-label\">Engedélyezve</label>\n                </div>\n                <div class=\"col-sm-8 col-lg-5 \">\n                    <input v-model=\"category.enabled\" type=\"checkbox\" id=\"categoryEnabled\" required=\"required\" class=\"form-check-input\" data-switch=\"success\">\n                    <label class=\"form-check-label required\" for=\"categoryEnabled\" data-on-label=\"Igen\" data-off-label=\"Nem\"></label>\n                </div>\n            </div>\n        </div>\n        <div class=\"mb-2\">\n            <div class=\"form-group row\">\n                <div class=\"col-sm-12 col-md-2\">\n                    <label class=\"col-form-label required\" for=\"categorySlug\">URL slug</label>\n                </div>\n                <div class=\"col-sm-12 col-md-8 col-xl-7 mr-auto\">\n                    <input v-model=\"category.slug\" type=\"text\" id=\"categorySlug\" required=\"required\" class=\"form-control\">\n                </div>\n            </div>\n        </div>\n        <div class=\"mb-2\">\n            <div class=\"form-group row\">\n                <div class=\"col-sm-12 col-md-2\">\n                    <label class=\"col-form-label required\" for=\"categoryDescription\">Leírás</label>\n                </div>\n                <div class=\"col-sm-12 col-md-8 col-xl-7 mr-auto\">\n                    <textarea v-model=\"category.description\" id=\"categoryDescription\" required=\"required\" rows=\"5\" class=\"form-control\"></textarea>\n\n                </div>\n            </div>\n        </div>\n        <div class=\"mb-2\">\n            <div class=\"form-group row\">\n                <div class=\"col-sm-12 col-md-2\">\n                    <div class=\"col-form-label\">Kép</div>\n                </div>\n                <div class=\"col-sm-12 col-md-5 col-xl-4 mr-auto\">\n                    <vue-clip\n                            :options=\"options\"\n                            :on-max-files=\"maxFilesReached\"\n                            :on-complete=\"complete\"\n                            :on-added-file=\"addedFile\"\n                            class=\"uploader\"\n                            :key=\"componentKey\"\n                            ref=\"vueclip\"\n                    >\n                        <template v-slot:clip-uploader-action=\"props\">\n                            <div class=\"uploader-action\" v-bind:class=\"{dragging: props.dragging}\">\n                                <div class=\"dz-message\"><h5> Képfeltöltés... </h5></div>\n                            </div>\n                        </template>\n        \n                        <template v-slot:clip-uploader-body=\"props\">\n                            <div class=\"uploader-files\">\n                                <div v-for=\"file in files\" class=\"uploader-file d-flex justify-content-start align-items-center mb-2X\">\n                                    <div class=\"file-avatar mr-3\">\n                                        <img v-bind:src=\"file.dataUrl\" class=\"img-thumbnail\" />\n                                    </div>\n                                    <div class=\"file-details\">\n                                        <div class=\"file-name\">\n                                            {{ file.name }} {{ file.customAttributes.id }}\n                                            <!--{{ file.status }}-->\n                                        </div>\n                                        <div class=\"file-progress\" v-if=\"file.status !== 'error' && file.status !== 'success'\">\n                                            <span class=\"progress-indicator\" v-bind:style=\"{width: file.progress + '%'}\"></span>\n                                        </div>\n                                        <div class=\"file-meta\" v-else>\n                                            <span class=\"file-size\">{{ file.size }} KB</span> |\n                                            <span class=\"file-status text-success\">{{ file.progress }}%</span>\n                                            <span class=\"file-status text-danger\" v-if=\"file.progress === 0 && file.errorMessage\">{{ file.errorMessage }}</span>\n                                        </div>\n                                        <!--<div class=\"file-meta\" v-if=\"error\">-->\n                                        <!--<span class=\"file-size\">{{ error }} !!</span>-->\n                                        <!--</div>-->\n                                    </div>\n                                </div>\n                            </div>\n                        </template>\n                    </vue-clip>\n                    \n                    \n                    <!--<file-upload-->\n                            <!--v-model=\"imageUrl\"-->\n                            <!--:resetForm=\"resetForm\"-->\n                    <!--&gt;-->\n                        <!--<div slot=\"activator\">-->\n                            <!--<div v-if=\"!imageUrl\" class=\"w-100 mt-2\">-->\n                                <!--<span class=\"p-2 my-2\">Képválasztás</span>-->\n                            <!--</div>-->\n                            <!--<div v-else class=\"w-100 mt-2\">-->\n                                <!--<img :src=\"imageUrl.imageUrl\" class=\"img-thumbnail\" style=\"max-height: 40px; width: 160px;\" />-->\n                            <!--</div>-->\n                        <!--</div>-->\n                    <!--</file-upload>-->\n                    <!--<div v-if=\"imageUrl && isImageSaved == false\">-->\n                        <!--<button @click.prevent=\"submitFile\" :isImageUploading=\"isImageUploading\" class=\"btn btn-outline-secondary\" >Mentés</button>-->\n                    <!--</div>-->\n                </div>\n            </div>\n        </div>\n        <div class=\"mb-2\">\n            <div class=\"form-group row\">\n                <div class=\"col-sm-12 col-md-2\">\n                </div>\n                <div class=\"col-md-12 col-lg-7 mr-auto\">\n                    <button @click.prevent=\"onSubmit\" type=\"submit\" class=\"btn btn-primary\" formnovalidate=\"\">{{ category.name ? 'Mentés' : 'Hozzáadás' }}</button>\n                    <a href=\"#\" v-if=\"category.name\" @click.prevent=\"onCancelClicked\" class=\"btn btn-outline-secondary\">Mégse</a>\n                </div>\n            </div>\n        </div>\n    </form>\n</template>\n\n<script>\n    import FileUpload from './FileUpload'\n\n    const initialData = () => {\n        return {\n            options: {\n                url: '/hu/admin/api/images/category/',\n                headers: {\n//                        credentials: 'same-origin',\n//                        type: 'multipart/form-data',  // ??\n                },\n                paramName: 'imageFile',\n                uploadMultiple: false,\n                parallelUploads: 1,\n//                maxFiles: {\n//                    limit: 2,\n//                    message: 'You can only upload a max of 5 files'\n//                },\n                acceptedFiles: {\n                    extensions: ['image/*'],\n                    message: 'You are uploading an invalid file'\n                },\n            },\n        }\n    };\n    \n    export default {\n        components: {\n            FileUpload: FileUpload,\n        },\n        props: [\n            'category',\n            'parentCategories',\n            'errors',\n            'resetForm',\n        ],\n        data: function () {\n            return {\n                localErrors: [],\n\n                isImageUploading: false,\n                isImageSaved: false,\n                \n                imageUrl: null,\n                options: initialData().options,\n                files: [],\n                componentKey: 0,  // can be somethingElse, whatever\n            }\n        },\n        watch: {\n            category: 'updateForm',\n            imageUrl: {\n                handler: function () {\n                    this.isImageSaved = false\n                },\n                deep: true\n            },\n            resetForm: 'resetUploader',\n        },\n        methods: {\n            submitFile () {\n                this.isImageUploading = true;\n                setTimeout(() => this.savedImage(), 1000)\n            },\n            savedImage () {\n                this.isImageUploading = false;\n                this.isImageSaved = true\n            },\n            onSubmit (e) {\n                if (this.validatedForm(e)) {\n                    this.$emit('submit', this.category);\n                }\n            },\n            onCancelClicked () {\n                this.$emit('click', this.category)\n            },\n            validatedForm (e) {\n                this.localErrors = [];\n                if (!this.category.name) {\n                    this.localErrors.push('Add meg a kategória nevét.');\n                }\n                if (!this.category.slug) {\n                    this.localErrors.push('Add meg a slug-ot.');\n                }\n                if (!this.localErrors.length) {   // equals to: if length == 0\n                    return true;\n                }\n                e.preventDefault();\n            },\n            updateForm () {\n                this.localErrors = [];\n                this.resetUploader();\n                this.imageUrl = this.category.imageUrl;\n                let el = this.$refs.form;\n                el.scrollIntoView();\n            },\n            resetUploader () {\n                this.$refs.vueclip.removeAllFiles();\n                this.files = [];\n                this.componentKey += 1;\n            },\n            maxFilesReached (file) {\n                console.log(file.errorMessage);\n            },\n            \n            complete (file, status, xhr) {\n                // Adding server id to be used for deleting the file.\n                if (status === 'success') {\n                    // xhr.response is a json string which needs to be decoded\n                    let data = JSON.parse(xhr.response);\n//                    console.log(data);\n                    for (let item of Object.values(data.images)) {\n                        file.addAttribute('id', item.id);\n                        this.category.image = item;\n                        this.category.imageUrl = item.file;\n                    }\n                    //                    this.imageFile = item.id;\n                } else {\n                    let item = JSON.parse(xhr.response);\n                    this.errors.push(item.errors.imageFile);\n                    console.log(item.errors.imageFile)\n                }\n            },\n            addedFile (file) {\n                this.files.push(file);\n            },\n        },\n        // This is necessary, because of a bug in Dropzone, which ignores options: { uploadMultiple: false, }\n        mounted() {\n            this.$refs.vueclip.uploader._uploader.hiddenFileInput.removeAttribute(\"multiple\")\n        }\n    }\n</script>\n\n<style scoped=\"\">\n    ul {\n        margin-bottom: 0;\n    }\n\n</style>","<template>\n    <div class=\"row mb-1\">\n        <div v-if=\"isDataLoading\" class=\"d-flex justify-content-center w-100 h-100\" style=\"z-index: 15000; opacity: 1;\">\n            <div class=\"d-flex justify-content-center h-100 mt-5 align-items-center\">\n                <div>\n                    <div class=\"d-flex justify-content-center\">\n                        <div class=\"spinner-border text-primary\" role=\"status\"></div>\n                    </div>\n                    <div class=\"d-flex justify-content-center mt-2\">Tartalom betöltése...</div>\n                </div>\n\n            </div>\n        </div>\n        <template v-else>\n            <div class=\"col-12\">\n                <div class=\"row\">\n                    <div class=\"col-12 col-md-4\">\n                        <label class=\"col-form-label required\">Válassz megyét:</label>\n                        <multiselect\n                                v-model=\"provinceInForm\"\n                                :options=\"provinces\"\n                                :custom-label=\"showProvinceName\"\n                                placeholder=\"Válassz...\"\n                                track-by=\"province\"\n                                :showLabels=\"false\"\n                                :loading=\"dataIsLoading\"\n                                class=\"mb-2\"\n                        >\n                            <span slot=\"noResult\">Upsz! Nincs ilyen megye vagy elírtad...</span>\n                        </multiselect>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <label class=\"col-form-label required\">Mozgasd át a településeket balról jobbra, majd add meg a szállítási díjat:</label>\n                    </div>\n                    <div class=\"col-12\">\n                        <div class=\"d-flex flex-row flex-grow-1X justify-content-between align-items-stretch\">\n                            <div class=\"col-6X w-100 d-flex justify-content-lg-start mb-2\">\n                                <select\n                                        v-model=\"selectedCities\"\n                                        id=\"whereTo\" name=\"whereTo\"\n                                        class=\"form-control form-control-sm\"\n                                        required=\"required\"\n                                        multiple\n                                        size=\"11\"\n                                >\n                                    <template v-for=\"item in cities\" track-by=\"id\">\n                                        <option :value=\"item.id\">{{item.city}} - {{item.zip}} {{item.district ? ' - ' + item.district + ' kerület' : ''}} {{ item.price ? ' - ' + item.price.price.value + ' Ft' : ''}}</option>\n                                    </template>\n                                </select>\n                            </div>\n                            <div class=\"d-flex justify-content-lg-center align-self-center px-2\">\n                                <button @click.prevent=\"addCities(selectedCities)\" class=\"btn btn-dark\" formnovalidate=\"\">\n                                    <!--type=\"submit\" -->\n                                    <i class=\"fas fa-long-arrow-alt-right mr-0\"></i>\n                                </button>\n                            </div>\n                            <div class=\"col-6X w-100 d-flex flex-column mb-2\">\n                                <form>\n                                    <div class=\"w-100 mb-2\">\n                                        <!--<input v-model=\"citiesWithPrice\" type=\"hidden\">-->\n                                        <select\n                                                id=\"whereTo\" name=\"whereTo\"\n                                                class=\"form-control form-control-sm\"\n                                                required=\"required\"\n                                                multiple\n                                                size=\"6\"\n                                        >\n                                            <template v-for=\"item in addedCities\" track-by=\"id\">\n                                                <option :value=\"item.id\">{{item.city}} - {{item.zip}}</option>\n                                            </template>\n                                        </select>\n                                    </div>\n                                    <div class=\"mb-2X\">\n                                        <div class=\"form-group row\">\n                                            <div class=\"col-sm-12 col-md-8\">\n                                                <label class=\"col-form-label required\" for=\"price\">Szállítási díj</label>\n                                                <input v-model=\"price\" type=\"number\" id=\"price\" required=\"required\" class=\"form-control\">\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"mb-2X\">\n                                        <div class=\"form-group row mb-0\">\n                                            <div class=\"col-sm-12\">\n                                                <button @click.prevent=\"saveForm(addedCities, price, $event)\" class=\"btn btn-info mr-1\" formnovalidate=\"\">{{ price ? 'Mentés' : 'Hozzáadás' }}</button>\n<!--                                                @click.prevent=\"onCancelClicked\"-->\n                                                <a v-if=\"addedCities\" :href=\"backUrl\" class=\"btn btn-secondary\">Mégse</a>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script>\n    import Multiselect from 'vue-multiselect'\n\n    const initialData = () => {\n        return {\n            dataIsLoading: true,\n            selectedCities: [],\n            cities: [],\n            addedCities: [],\n            formErrors: [],\n            resetForm: false,  // If true will hide form errors and uploaded images preview\n            price: null,\n            citiesWithPrice: {\n                cities: [],\n                price: null,\n            },\n            provinceInForm: '',\n            provinces: [],\n            i: 0,\n        }\n    };\n\n    export default {\n        components: {\n            Multiselect,\n        },\n        props: [\n            'backUrl',\n        ],\n        data: initialData,\n        watch: {\n            provinceInForm: {\n                handler: function () {\n                    this.getCityList(this.provinceInForm.province)\n                }\n            }\n        },\n        methods: {\n            showProvinceName (provinceObj) {\n                return `${provinceObj.province}`\n            },\n            addCities (selCities) {\n                let i = '';\n                for (i in selCities) {\n                    const index = this.cities.findIndex((c) => c.id === selCities[i]);\n                    // if found\n                    if (index !== -1) {\n                        let cityObj = this.cities[index];\n                        if (!this.addedCities.includes(cityObj)) {\n                            // includes() is not supported Edge13 and earlier\n                            this.addedCities.push(cityObj);\n                        }\n                    } else {\n                        console.log ('City not found!')\n                    }\n                }\n            },\n            saveForm (addedCities, price, e) {\n                const citiesWithPrice = {};\n                citiesWithPrice.cities = addedCities;\n                citiesWithPrice.price = price;\n                this.$http.post('/hu/admin/api/geoplace/price/', citiesWithPrice)\n                            .then(\n                                response => {\n                                    this.resetDataInForm();\n                                    this.showToast('Szállítási díjak rögzítve!', 'success');\n                                    this.getCityList(this.provinceInForm.province);\n                                },\n                                response => {\n                                    if (response.status === 422) {\n                                        for (let value of Object.values(response.body.errors)) {\n                                            console.log(response.body.errors);\n                                            this.formErrors.push(value.message);\n                                            this.showToast(value.message, 'danger');\n                                        }\n                                    }\n                                    if (!this.formErrors.length) {\n                                        this.resetDataInForm()\n                                    }\n                                });\n            },\n            resetDataInForm () {\n                this.selectedCities = initialData().selectedCities;\n                this.addedCities = initialData().addedCities;\n                this.price = initialData().price;\n                this.citiesWithPrice = initialData().citiesWithPrice;\n                this.formErrors = initialData().formErrors;\n                this.resetForm = true;  // azert vettem ki, mert ugyis a kategoria valtozast figyeli\n            },\n            getCityList (province) {\n                this.$http.get(`/hu/admin/api/geoplace/cities/?province=${province}`)\n                    .then(response => {\n                        this.cities = response.data.cities;\n                        this.dataIsLoading = false;\n                    }, response => {\n                        if (response.status === 422) {\n                            for (let value of Object.values(response.body.errors)) {\n                                console.log(value.message);\n                                this.showToast(value.message, 'danger');\n                            }\n                        }\n                    });\n            },\n            onCancelClicked () {\n                this.$emit('click');\n            },\n            showToast (message, type) {\n                let title = '';\n                switch (type) {\n                    case 'success':\n                        title = 'SIKERES MŰVELET';\n                        break;\n                    case 'danger':\n                        title = 'HIBA!';\n                        break;\n                    case 'warning':\n                        title = 'FIGYELEM!';\n                        break;\n                    default:\n                        title = 'FIGYELEM!';\n                        break;\n                }\n                this.$bvToast.toast(message, {\n                    title: title,\n                    autoHideDelay: 5000,\n                    appendToast: true,\n                    variant: type,\n                    toaster: \"b-toaster-bottom-left\",\n                });\n            },\n            getProvinceList () {\n                this.$http.get(`/hu/admin/api/geoplace/provinces/`)\n                    .then(response => {\n                        this.provinces = response.data.provinces;\n                        this.dataIsLoading = false;\n                    }, response => {\n                        if (response.status === 422) {\n                            for (let value of Object.values(response.body.errors)) {\n//                            this.formErrors.push(value);\n                                console.log(value);\n                            }\n                        }\n                    });\n            },\n        },\n        created () {\n            this.getProvinceList();\n        },\n    }\n</script>\n\n<!--<style src=\"vue-multiselect/dist/vue-multiselect.min.css\"></style>-->\n<style scoped>\n    select option {\n        padding: .45rem 0.125rem !important;\n        border-bottom: 1px solid #ccd4da;\n    }\n</style>\n\n"],"sourceRoot":""}*/